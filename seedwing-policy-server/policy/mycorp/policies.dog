
pattern people-near-me = lang::Or<*data::From<"people.json">>

pattern furry = {
  furry: true
}

pattern loving = {
  loving: true
}

/// Something that is a furry loving dog.
///
/// ```
/// {
///   "furry": true,
///   "loving": true,
/// }
/// ```
pattern dog = furry && loving

pattern foo = {
  foo: integer
}

// comment removed.

pattern bar = {
  bar: integer
}

pattern baz = {
  baz: integer
}

pattern signers = lang::Or<[ "bob", "jim" ]>


/// It could be a foo
/// or a bar or a baz
pattern quux = foo || bar || baz


/// A pattern defining via traversal.
///
/// Example input:
///
/// ```
/// {
///   "foo": "bob"
/// }
/// ```
pattern shallow = self.foo

/// A pattern defining via traversal.
///
/// Example input:
///
/// ```
/// {
///   "foo": {
///     "bar": "bob"
///   }
/// }
/// ```
pattern deep = self.foo.bar("bob")


/// Something signed by bob.
///
/// Example input
/// 
/// ```
/// {
///     "digest": "5dd1e2b50b89874fd086da4b61176167ae9e4b434945325326690c8f604d0408"
/// }
/// ```
pattern signed-thing = {
    digest: sigstore::SHA256(
        list::Any<{
            apiVersion: "0.0.1",
            spec: {
                signature: {
                    publicKey: {
                        content: base64::Base64(
                            x509::PEM( list::Any<{
                                version: 2,
                                extensions: list::Any<{
                                    subjectAlternativeName: list::Any<{
                                        rfc822: "bob@mcwhirter.org",
                                    }>
                                }>
                            }> )
                        )
                    }
                }
            }
        }>
    )
}

pattern acceptable-sbom = 
  cyclonedx::v1_4::bom 
  && cyclonedx::v1_4::with-components<acceptable-component>

pattern acceptable-component = 
  cyclonedx::v1_4::with-licenses<acceptable-license>

pattern acceptable-license = {
  license: {
    id: "BSD-3-Clause"
  }
}
