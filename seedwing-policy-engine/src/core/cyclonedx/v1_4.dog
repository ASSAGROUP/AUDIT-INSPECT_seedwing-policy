/// Pattern matching a well-formed CycloneDX (v1.4) BOM.
pattern bom = {
  bomFormat: "CycloneDX",
  specVersion: "1.4",
  serialNumber?: string,
  version: integer,
  metadata?: metadata,
  components?: list::All<component>,
  services?: list::All<service>,
  externalReferences?: list::All<external-reference>,
  dependencies?: list::All<dependency>,
  compositions?: list::All<composition>,
  vulnerabilities?: list::All<vulnerability>,
  // signature?: signature
}

pattern metadata = {
  timestamp?: string,
  tools?: list::All<tool>,
  authors?: list::All<contact>,
}

pattern tool = {
  vendor?: string,
  name?: string,
  version?: string,
  hashes?: list::All<hash>,
  externalReferences?: list::All<external-reference>,
}

/// A hash attached to a CycloneDX SBOM.
///
/// Example input:
/// ```
/// {
///   "alg": "SHA3-512",
///   "content": "6ed81f58d9039e56d393165bd26c998584e364f7975e33f5c3008ac10d67ed190edcd196c5ce1554e23c4e1271f8aed631e07c3ea0de59a3457891d188e71b67"
/// }
/// ```
pattern hash =
    cyclonedx::hash::md5
    || cyclonedx::hash::sha-1
    || cyclonedx::hash::sha-256
    || cyclonedx::hash::sha-384
    || cyclonedx::hash::sha-512
    || cyclonedx::hash::sha3-256
    || cyclonedx::hash::sha3-384
    || cyclonedx::hash::sha3-512
    || {
      alg: "BLAKE2b-256" || "BLAKE2b-384" || "BLAKE2b-512" || "BLAKE3",
      content: string,
    }

pattern external-reference = {
  url: string,
  comment?: string,
  type:  "vcs"
      || "issue-tracker"
      || "website"
      || "advisories"
      || "bom"
      || "mailing-list"
      || "social"
      || "chat"
      || "documentation"
      || "support"
      || "distribution"
      || "license"
      || "build-meta"
      || "build-system"
      || "release-notes"
      || "other",
  hashes?: list::All<hash>,
}

pattern contact = {
  name?: string,
  email?: string,
  phone?: string,
}

pattern component = {
  type: "application"
     || "framework"
     || "library"
     || "container"
     || "operating-system"
     || "device"
     || "firmware"
     || "file",

  mime-type?: string,
  bom-ref?: string,
  supplier?: list::All<{
    name?: string,
    url?: string,
    contact: list::All<contact>,
  }>,
  author?: string,
  publisher?: string,
  group?: string,
  name: string,
  version?: string,
  description?: string,
  scope?: "required" || "optional" || "excluded",
  hashes?: list::All<hash>,
  licenses?: list::All<license>,
  copyright?: string,
  cpe?: string,
  purl?: string,
  swid?: iso::swid::tag,
  pedigree?: {
    ancestors?: list::All<component>,
    descendants?: list::All<component>,
    variants?: list::All<component>,
    commits?: list::All<commit>,
    patches?: list::All<patch>,
    notes?: list::All<string>,
  },
  externalReferences?: list::All<external-reference>,
  components?: list::All<component>,
  evidence?: {
    licenses?: list::All<license>,
    copyright?: list::All<{ text: string}>,
  },
  releaseNotes?: list::All<release-note>,
  properties?: list::All< {
    name: string,
    value: string,
  } >,
  //signature?: signature,
}

pattern text = {
  content-type?: string,
  encoding?: "base64",
  content: string,
}

pattern license = {
  expression: string,
} || {
  id: spdx::license::id,
  name?: string,
  text?: text,
  url?: string,
}

pattern commit = {
  uid?: string,
  url?: string,
  author?: {
    timestamp?: string,
    name?: string,
    email?: string,
  },
  committer?: {
    timestamp?: string,
    name?: string,
    email?: string,
  },
  message?: string,
}

pattern patch = {
  type: "unofficial"
     || "monkey"
     || "backport"
     || "cherry-pick",
  diff?: {
    text?: text,
    url?: string,
  },
  resolves: list::All<issue>,
}

pattern release-note = {
  type: "major" || "minor" || "patch" || "pre-release" || "internal",
  title?: string,
  featuredImage?: string,
  socialImage?: string,
  description?: string,
  timestamp?: string,
  aliases?: list::All<string>,
  tags?: list::All<string>,
  resolves?: list::All<issue>,
  notes?: list::All<{
    locale?: string,
    text: text,
  }>,
}

pattern issue = {
  type: "defect" || "enhancement" || "security",
  id?: string,
  name?: string,
  descriptions?: string,
  source?: source,
  references?: list::All<string>,
}

pattern dependency = {
  ref: string,
  dependsOn?: list::All<string>,
}

pattern composition = {
  aggregate: "complete"
    || "incomplete"
    || "incomplete_first_party_only"
    || "incomplete_third_party_only"
    || "unknown"
    || "not_specified",
  assemblies?: list::All<string>,
  dependencies?: list::All<string>,
  //signature?: signature
}

pattern vulnerability = {
  bom-ref?: string,
  id?: string,
  source?: source,
  references?: list::All< {
    id: string,
    source: source,
  } >,
  ratings?: list::All<rating>,
  cwes?: list::All<integer>,
  description?: string,
  detail?: string,
  recommendation?: string,
  advisories?: list::All<advisory>,
  created?: string,
  published?: string,
  updated?: string,
  credits?: {
    organizations?: list::All<organization>,
    individuals?: list::All<contact>,
  },
  tools?: list::All<tool>,
  // analysis?:
  // affects?:
  properties?: list::All< {
    name: string,
    value: string,
  } >,
}

pattern source = {
  name?: string,
  url?: string,
}

pattern rating = {
  source?: source,
  score?: decimal,
  severity?: "critical" || "high" || "medium" || "low" || "info" || "none" || "unknown",
  method?: "CVSSv2" || "CVSSv3" || "CVSSv31" || "OWASP" || "other",
  vector?: string,
  justification: string,
}

pattern advisory = {
  title?: string,
  url: string,
}

pattern organization = {
  name?: string,
  url?: string,
  contact?: list::All<contact>,
}

pattern service = {
 bom-ref?: string,
 provider?: organization,
 group?: string,
 name: string,
 version?: string,
 description?: string,
 endpoints?: list::All<string>,
 authenticated?: boolean,
 x-trust-boundary?: boolean,
 data?: list::All< {
   flow: "inbound" || "outbound" || "bi-directional" || "unknown",
   classification: string,
 } >,
 licenses?: list::All<license>,
 externalReferences?: list::All<external-reference>,
 services?: list::All<service>,
 releaseNotes?: list::All<release-note>,
 properties?: list::All< {
   name: string,
   value: string,
 } >,
 // signature?: signature

}